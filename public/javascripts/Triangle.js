// Generated by CoffeeScript 2.1.1
(function() {
  var Matrix, Vector;

  Matrix = linearAlgebra().Matrix;

  Vector = linearAlgebra().Vector;

  this.Triangle = class Triangle {
    constructor(gl1) {
      var buffer, dv, fShader, fShaderSource, gl, i, j, ref, vData, vShader, vShaderSource, vbo;
      this.draw = this.draw.bind(this);
      this.gl = gl1;
      this.pos = new Vector.zero(2);
      this.scale = new Vector.zero(2);
      vData = [-1, -1, 0, 1, -1, 0, 0, 1, 0];
      vShaderSource = "attribute vec3 pos;\nvoid main() {\n    gl_Position = vec4(pos, 1);\n}";
      fShaderSource = "precision mediump float;\nvoid main() {\n    gl_FragColor = vec4(1,1,1,1);\n}";
      gl = this.gl;
      vShader = gl.createShader(gl.VERTEX_SHADER);
      fShader = gl.createShader(gl.FRAGMENT_SHADER);
      gl.shaderSource(vShader, vShaderSource);
      gl.shaderSource(fShader, fShaderSource);
      gl.compileShader(vShader);
      gl.compileShader(fShader);
      console.log(gl.getShaderInfoLog(vShader));
      console.log(gl.getShaderInfoLog(fShader));
      this.program = gl.createProgram();
      gl.attachShader(this.program, vShader);
      gl.attachShader(this.program, fShader);
      buffer = new ArrayBuffer(4 * vData.length);
      dv = new DataView(buffer);
      for (i = j = 0, ref = vData.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        dv.setFloat32(i * 4, vData[i], true);
      }
      vbo = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
      gl.bufferData(gl.ARRAY_BUFFER, buffer, gl.STATIC_DRAW);
      gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
      gl.enableVertexAttribArray(0);
      gl.bindAttribLocation(this.program, 0, 'pos');
      gl.linkProgram(this.program);
      console.log(gl.getProgramInfoLog(this.program));
    }

    draw() {
      var gl;
      gl = this.gl;
      gl.useProgram(this.program);
      return gl.drawArrays(gl.TRIANGLES, 0, 3);
    }

  };

}).call(this);
